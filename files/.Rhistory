tableOutput("results-table")
)
# Define the server for the Shiny app
server <- function(input, output) {
# Render the table
output$results_table <- renderTable({
table_results(bracket_data)
}, include.rownames = FALSE)
}
# Run the Shiny app
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Tournament Results"),
sidebarLayout(
sidebarPanel(),
mainPanel(
tableOutput("results_table")
)
)
)
server <- function(input, output) {
output$results_table <- renderTable({
table_results(bracket_data)
})
}
shinyApp(ui, server)
View(championship)
View(round_1)
View(round_2)
View(round_3)
View(round_4)
View(round_5)
View(bracket_data)
View(table_results)
# Combine all the rounds into one dataframe
bracket_data <- bind_rows(round_1, round_2, round_3, round_4, round_5, championship)
# Create a function to generate the tournament results table
table_results <- function(bracket_data) {
# Filter the data to only include the final results
results <- bracket_data %>%
filter(round == max(round))
# Check if there are any results
if (nrow(results) == 0) {
return("No results available")
}
# Create a new data frame to hold the results
winners <- data.frame(
seed = 1:nrow(results),
team = ifelse(results$score1 > results$score2, results$team1, results$team2)
)
# Order the results by seed
winners <- winners %>%
arrange(seed)
# Create a flextable with the results
ft <- flextable(winners)
# Format the table
ft <- ft %>%
set_header_labels("", "Winner") %>%
align(align = "center", part = "all") %>%
width(width = 1, part = "1") %>%
bold(part = "header")
# Return the table
return(ft)
}
ui <- fluidPage(
titlePanel("Tournament Results"),
sidebarLayout(
sidebarPanel(),
mainPanel(
tableOutput("results_table")
)
)
)
server <- function(input, output) {
output$results_table <- renderTable({
table_results(bracket_data)
})
}
shinyApp(ui, server)
View(table_results)
# Filter the data to only include the final results
results <- bracket_data %>%
filter(round == max(round))
# Check if there are any results
if (nrow(results) == 0) {
return("No results available")
}
# Create a new data frame to hold the results
winners <- data.frame(
seed = 1:nrow(results),
team = ifelse(results$score1 > results$score2, results$team1, results$team2)
)
# Order the results by seed
winners <- winners %>%
arrange(seed)
# Create a flextable with the results
ft <- flextable(winners)
# Create a function to generate the tournament results table
table_results <- function(bracket_data) {
# Filter the data to only include the final results
results <- bracket_data %>%
filter(round == max(round))
# Check if there are any results
if (nrow(results) == 0) {
return("No results available")
}
ifelse(results$score1 > results$score2, results$team1, results$team2)
# Create a new data frame to hold the results
winners <- data.frame(
seed = 1:nrow(results),
team = ifelse(results$score1 > results$score2, results$team1, results$team2)
)
# Order the results by seed
winners <- winners %>%
arrange(seed)
# Create a flextable with the results
ft <- flextable(winners)
# Format the table
ft <- ft %>%
set_header_labels("", "Winner") %>%
align(align = "center", part = "all") %>%
width(width = 1, part = "1") %>%
bold(part = "header")
# Return the table
return(ft)
}
# Filter the data to only include the final results
results <- bracket_data %>%
filter(round == max(round))
# Check if there are any results
if (nrow(results) == 0) {
return("No results available")
}
ifelse(results$score1 > results$score2, results$team1, results$team2)
# Create a function to generate the tournament results table
table_results <- function(bracket_data) {
# Filter the data to only include the final results
results <- bracket_data %>%
filter(round == max(round))
# Check if there are any results
if (nrow(results) == 0) {
return("No results available")
}
ifelse(results$score1 > results$score2, results$team1, results$team2)
# Create a new data frame to hold the results
winners <- data.frame(
seed = 1:nrow(results),
team = ifelse(results$score1 > results$score2, results$team1, results$team2)
)
# Order the results by seed
winners <- winners %>%
arrange(seed)
# Create a flextable with the results
ft <- flextable(winners)
# Format the table
ft <- ft %>%
set_header_labels("", "Winner") %>%
align(align = "center", part = "all") %>%
width(width = 1, part = "1") %>%
bold(part = "header")
# Return the table
return(ft)
}
ifelse(results$score1 > results$score2, results$team1, results$team2)
library(tidyverse)
library(ggplot2)
library(shiny)
library(flextable)
library(tidyverse)
library(ggplot2)
library(shiny)
library(flextable)
# Create a dataframe with team names and scores
teams <- read.csv('tournament_data.csv') %>%
select(TEAM, KENPOM.ADJUSTED.EFFICIENCY,
BARTTORVIK.ADJUSTED.EFFICIENCY,
TURNOVER..,POINTS.PER.POSSESSION.DEFENSE, FREE.THROW..) %>%
distinct(TEAM, .keep_all = TRUE)
teams$score <- teams$KENPOM.ADJUSTED.EFFICIENCY *
teams$BARTTORVIK.ADJUSTED.EFFICIENCY *
teams$TURNOVER.. / teams$POINTS.PER.POSSESSION.DEFENSE * teams$FREE.THROW..
teams <- teams %>%
mutate(score = round(score,4))
# Seeding the teams based on their scores
teams_seeded <- teams %>%
arrange(desc(score)) %>%
mutate(seed = row_number())
# Adding a "bye" team if the number of teams is not a power of two
if (nrow(teams_seeded) %% 2 != 0) {
teams_seeded <- rbind(teams_seeded, data.frame(TEAM = "Bye", score = 0, seed = nrow(teams_seeded) + 1))
}
# Creating the bracket data
round_1 <- data.frame(
round = 1,
match = 1:(nrow(teams_seeded)%%32),
team1 = teams_seeded$TEAM[1:(nrow(teams_seeded)%%32)],
team2 = teams_seeded$TEAM[((nrow(teams_seeded)%%32) + 1):nrow(teams_seeded)]
)
round_2 <- data.frame(
round = 2,
match = 1:(nrow(round_1)/2),
team1 = ifelse(round_1$match %% 2 == 1, round_1$team1, round_1$team2),
team2 = ifelse(round_1$match %% 2 == 1, round_1$team2, round_1$team1)
)
round_3 <- data.frame(
round = 3,
match = 1:(nrow(round_2)/2),
team1 = ifelse(round_2$match %% 2 == 1, round_2$team1, round_2$team2),
team2 = ifelse(round_2$match %% 2 == 1, round_2$team2, round_2$team1)
)
round_4 <- data.frame(
round = 4,
match = 1:(nrow(round_3)/2),
team1 = ifelse(round_3$match %% 2 == 1, round_3$team1, round_3$team2),
team2 = ifelse(round_3$match %% 2 == 1, round_3$team2, round_3$team1)
)
round_5 <- data.frame(
round = 5,
match = 1:(nrow(round_4)/2),
team1 = ifelse(round_4$match %% 2 == 1, round_4$team1, round_4$team2),
team2 = ifelse(round_4$match %% 2 == 1, round_4$team2, round_4$team1)
)
championship <- data.frame(
round = 6,
match = 1,
team1 = ifelse(round_5$match %% 2 == 1, round_5$team1, round_5$team2),
team2 = ifelse(round_5$match %% 2 == 1, round_5$team2, round_5$team1)
)
# Combine all the rounds into one dataframe
bracket_data <- bind_rows(round_1, round_2, round_3, round_4, round_5, championship)
# Create a function to generate the tournament results table
table_results <- function(bracket_data) {
# Filter the data to only include the final results
results <- bracket_data %>%
filter(round == max(round))
if (nrow(results) == 0) {
return(NULL) # return NULL if no rows match the filtering criteria
}
# Create a new data frame to hold the results
winners <- data.frame(
seed = 1:nrow(results),
team = ifelse(results$score1 > results$score2, results$team1, results$team2)
)
# Order the results by seed
winners <- winners %>%
arrange(seed)
# Create a flextable with the results
ft <- flextable(winners)
# Format the table
ft <- ft %>%
set_header_labels("", "Winner") %>%
align(align = "center", part = "all") %>%
width(width = 1, part = "1") %>%
bold(part = "header")
# Return the table
return(ft)
}
print(max(bracket_data$round))
library(tidyverse)
library(ggplot2)
library(shiny)
library(flextable)
library(tidyverse)
library(ggplot2)
library(shiny)
library(flextable)
library(tidyverse)
library(ggplot2)
library(shiny)
library(flextable)
# Create a dataframe with team names and scores
teams <- read.csv('tournament_data.csv') %>%
select(TEAM, KENPOM.ADJUSTED.EFFICIENCY,
BARTTORVIK.ADJUSTED.EFFICIENCY,
TURNOVER..,POINTS.PER.POSSESSION.DEFENSE, FREE.THROW..) %>%
distinct(TEAM, .keep_all = TRUE)
teams$score <- teams$KENPOM.ADJUSTED.EFFICIENCY *
teams$BARTTORVIK.ADJUSTED.EFFICIENCY *
teams$TURNOVER.. / teams$POINTS.PER.POSSESSION.DEFENSE * teams$FREE.THROW..
teams <- teams %>%
mutate(score = round(score,4))
# Seeding the teams based on their scores
teams_seeded <- teams %>%
arrange(desc(score)) %>%
mutate(seed = row_number())
# Adding a "bye" team if the number of teams is not a power of two
if (nrow(teams_seeded) %% 2 != 0) {
teams_seeded <- rbind(teams_seeded, data.frame(TEAM = "Bye", score = 0, seed = nrow(teams_seeded) + 1))
}
# Creating the bracket data
round_1 <- data.frame(
round = 1,
match = 1:(nrow(teams_seeded)%%32),
team1 = teams_seeded$TEAM[1:(nrow(teams_seeded)%%32)],
team2 = teams_seeded$TEAM[((nrow(teams_seeded)%%32) + 1):nrow(teams_seeded)]
)
round_2 <- data.frame(
round = 2,
match = 1:(nrow(round_1)/2),
team1 = ifelse(round_1$match %% 2 == 1, round_1$team1, round_1$team2),
team2 = ifelse(round_1$match %% 2 == 1, round_1$team2, round_1$team1)
)
round_3 <- data.frame(
round = 3,
match = 1:(nrow(round_2)/2),
team1 = ifelse(round_2$match %% 2 == 1, round_2$team1, round_2$team2),
team2 = ifelse(round_2$match %% 2 == 1, round_2$team2, round_2$team1)
)
round_4 <- data.frame(
round = 4,
match = 1:(nrow(round_3)/2),
team1 = ifelse(round_3$match %% 2 == 1, round_3$team1, round_3$team2),
team2 = ifelse(round_3$match %% 2 == 1, round_3$team2, round_3$team1)
)
round_5 <- data.frame(
round = 5,
match = 1:(nrow(round_4)/2),
team1 = ifelse(round_4$match %% 2 == 1, round_4$team1, round_4$team2),
team2 = ifelse(round_4$match %% 2 == 1, round_4$team2, round_4$team1)
)
championship <- data.frame(
round = 6,
match = 1,
team1 = ifelse(round_5$match %% 2 == 1, round_5$team1, round_5$team2),
team2 = ifelse(round_5$match %% 2 == 1, round_5$team2, round_5$team1)
)
# Combine all the rounds into one dataframe
bracket_data <- bind_rows(round_1, round_2, round_3, round_4, round_5, championship)
# Create a function to generate the tournament results table
table_results <- function(bracket_data) {
# Filter the data to only include the final results
results <- bracket_data %>%
filter(round == max(round))
if (nrow(results) == 0) {
return(NULL) # return NULL if no rows match the filtering criteria
}
# Create a new data frame to hold the results
winners <- data.frame(
seed = 1:nrow(results),
team = ifelse(results$score1 > results$score2, results$team1, results$team2)
)
# Order the results by seed
winners <- winners %>%
arrange(seed)
# Create a flextable with the results
ft <- flextable(winners)
# Format the table
ft <- ft %>%
set_header_labels("", "Winner") %>%
align(align = "center", part = "all") %>%
width(width = 1, part = "1") %>%
bold(part = "header")
# Return the table
return(ft)
}
print(max(bracket_data$round))
ui <- fluidPage(
titlePanel("Tournament Results"),
sidebarLayout(
sidebarPanel(),
mainPanel(
tableOutput("results_table")
)
)
)
server <- function(input, output) {
output$results_table <- renderTable({
table_results(bracket_data)
})
}
shinyApp(ui, server)
View(bracket_data)
View(championship)
View(bracket_data)
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
library(viridis)
library(shiny)
library(readxl)
rm(list = ls())
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
library(viridis)
library(shiny)
library(readxl)
rm(list = ls())
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
library(viridis)
library(shiny)
library(readxl)
rm(list = ls())
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
library(viridis)
library(shiny)
library(readxl)
rm(list = ls())
# Read in excel file
df <- read_excel("data/master_meta.xlsx") %>%
# Selecting the variables I want to use
select(Watershed, Site, Tot_inv_abun, FBI, pH, Temp, DO_per, DO_ppm, SPC, TDS,
PO4, NO3, NH3, BOD, TSS, Discharge, Chloride, Arsenic, Mercury, Lead,
Wetland, Forest, Grass, Agricultural, Tot_Tree_D, Hab_Index) %>%
# Duck and Rock River Watersheds are just NA values so filter them out
filter(Watershed != 'Duck') %>%
filter(Watershed != 'Rock River')
setwd("C:/Users/Eirik/OneDrive/College/Senior/Data 332/mi_valley")
# Read in excel file
df <- read_excel("data/master_meta.xlsx") %>%
# Selecting the variables I want to use
select(Watershed, Site, Tot_inv_abun, FBI, pH, Temp, DO_per, DO_ppm, SPC, TDS,
PO4, NO3, NH3, BOD, TSS, Discharge, Chloride, Arsenic, Mercury, Lead,
Wetland, Forest, Grass, Agricultural, Tot_Tree_D, Hab_Index) %>%
# Duck and Rock River Watersheds are just NA values so filter them out
filter(Watershed != 'Duck') %>%
filter(Watershed != 'Rock River')
# Quick summary of data
summary(df)
# Simple scatter plot of Phosphate by Watershed
ggplot(df, aes(x = Watershed, y = PO4)) +
geom_point()
# Chart of Phosphate values by Site w/ Watershed color-coded
ggplot(df, aes(x = Site, y = PO4, fill = Watershed)) +
geom_col() #Rock Island values very high
# Phosphate stats
mean_value <- mean(df$PO4)
median_value <- median(df$PO4)
sd_value <- sd(df$PO4)
# Perform correlation analysis
correlation <- cor(df$PO4, df$pH)
# Perform t-test
t_test_result <- t.test(df$PO4, df$pH)
View(t_test_result)
print(t_test_result)
View(df)
# Perform correlation analysis
correlation <- cor(df$PO4, df$Agricultural)
# Perform t-test
t_test_result <- t.test(df$PO4, df$Agricultural)
print(t_test_result)
# Perform correlation analysis
correlation <- cor(df$PO4, df$Grass)
# Perform correlation analysis
correlation <- cor(df$PO4, df$Forest)
# Perform correlation analysis
correlation <- cor(df$PO4, df$Wetland)
# Read in excel file
df <- read_excel("data/master_meta.xlsx") %>%
# Selecting the variables I want to use
select(Watershed, Site, Tot_inv_abun, FBI, pH, Temp, DO_per, DO_ppm, SPC, TDS,
PO4, NO3, NH3, BOD, TSS, Discharge, Chloride, Arsenic, Mercury, Lead,
Wetland, Forest, Grass, Agricultural) %>%
# Duck and Rock River Watersheds are just NA values so filter them out
filter(Watershed != 'Duck') %>%
filter(Watershed != 'Rock River')
# Quick summary of data
summary(df)
# Simple scatter plot of Phosphate by Watershed
ggplot(df, aes(x = Watershed, y = PO4)) +
geom_point()
# Chart of Phosphate values by Site w/ Watershed color-coded
ggplot(df, aes(x = Site, y = PO4, fill = Watershed)) +
geom_col() #Rock Island values very high
# Phosphate stats
mean_value <- mean(df$PO4)
median_value <- median(df$PO4)
sd_value <- sd(df$PO4)
# Perform correlation analysis
correlation <- cor(df$PO4, df$pH)
# Perform correlation analysis
correlation <- cor(df$PO4, df$Temp)
# Perform t-test
t_test_result <- t.test(df$PO4, df$Temp)
print(t_test_result)
# Perform t-test
t_test_result <- t.test(df$PO4, df$Watershed)
# Perform t-test
t_test_result <- t.test(df$PO4, df$Mercury)
print(t_test_result)
# Perform t-test
t_test_result <- t.test(df$PO4, df$NO3)
print(t_test_result)
# Perform t-test
t_test_result <- t.test(df$PO4, df$NH3)
print(t_test_result)
# Perform t-test
t_test_result <- t.test(df$PO4, df$TDS)
print(t_test_result)
# Perform t-test
t_test_result <- t.test(df$PO4, df$DO_per)
print(t_test_result)
correlation <- cor(df$PO4, df$Lead)
# Perform correlation analysis
correlation <- cor(df$PO4, df$Temp)
cor <- cor(df$PO4, df$Lead)
cor <- cor(df$PO4, df$Mercury)
cor <- cor(df$PO4, df$Chloride)
cor_matrix <- cor(df)
cor_matrix <- cor(df$pH, df$Temp, df$DO_per, df$DO_ppm, df$PO4)
cor_matrix <- cor(df$pH, df$Temp, df$DO_per, df$DO_ppm)
df_num <- df[, sapply(df, is.numeric)]
cor_matrix <- cor(df_num)
print(cor_matrix)
